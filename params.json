{
  "name": "sinatra-notebook",
  "tagline": "A small app for sharing lessons with music students.",
  "body": "\r\n\r\n###Experimentation\r\n\r\nI collect ducks. Usually without knowing it. I often wrestle with those ducks, trying to put them in rows. Once I get a row, I am then allowed to start. What I mean by that is this: I feel as though I need to know the most efficient methods, the most effective approaches to a task, or goal, before I start. In essence, I want to know the outcome of my actions, even before acting. That mindset, as obviously futile as it is, can often be paralyzing. It has put a stop to many of my ideas before those ideas ever started. Case in point, this blog. I have always felt as though I need to be the world's foremost expert (or close to it) on a subject in order to write about it. \r\n\r\nAs an avid reader and listener of [Tim Ferriss](fourhourworkweek.com/blog/), it has slowly dawned upon me that _experimentation_ is a much more rewarding and feasible approach to acting on an idea. I feel as though experimentation ...agile development, the concept of learning from your own actions, tracking data, is a more effective mindset for learning, for acting on ideas, and growing as a person. With that in mind, that is the format this blog post will take. Examining issues, things that I did not/do not know, my solutions, even if they are not the best or 'right', documenting them, examinging what I did right, what I can do better next time. Use this blog post as a measuring stick.\r\n\r\n###Issue #1 Where to start? Boilerplate and Workflow.\r\n##What I did right.\r\nI had a good idea of which gems I would be relying on,\r\n\r\n##What I could do better.\r\nOnce I got my core files and directories set up, I should have uploaded them to an additional remote repository as a staring point for any future Sinatra projects. \r\n\r\nI did find this [boilerplate](http://ashleygwilliams.github.io/ratpack/), however, which is similar to what I put together. I will probably give this a whirl next time around, although I think there is something to be said for crafting one's own set of tools when possible.\r\n\r\n\r\n\r\n###Issue #2 Multiple Controllers - configuration.\r\n\r\n\r\nI had an issue with '[properly](http://stackoverflow.com/questions/735073/best-way-to-require-all-files-from-a-directory-in-ruby)' requiring relative files. I could get the 'improper' method working, \r\n```ruby\r\nDir[\"/path/to/directory/*.rb\"].each {|file| require file }\r\n```\r\nbut ended up with an empty array when using the proper technique. \r\n```ruby\r\nDir[File.dirname(__FILE__) + '/lib/*.rb'].each {|file| require file }\r\n```\r\nI never did come to an understanding as to why I couldn't get it to work. \r\nI ended up using the `require_all` gem instead.\r\n\r\n###Issue #3 The use of sessions vs a dynamic URL\r\n\r\n###Issue #4 Using multiple layouts and templates\r\n\r\n###Issue #5 The frustration of CSS.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Welcome to GitHub Pages.\r\n```ruby\r\ndef say_hello(name)\r\n  puts \"Hello #{name}.\"\r\nend\r\n```\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}